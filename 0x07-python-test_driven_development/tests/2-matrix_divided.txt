Example text file for the function, matrix_divided()


    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

passing a 2 x 2 matrix of integers to the function:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

passing a good ol' list:
    >>> list_ = [1, 2, 3, 4]
    >>> matrix_divided(list_, 2)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 22, in matrix_divided
        raise TypeError("matrix must be a matrix" +
    TypeError: matrix must be a matrix(list of lists) of integers/floats

With an empty list of lists:
    >>> matrix = [[], []]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 22, in matrix_divided
        raise TypeError("matrix must be a matrix" +
    TypeError: matrix must be a matrix(list of lists) of integers/floats

With an empty list:
    >>> matrix = []
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 16, in matrix_divided
        raise TypeError("matrix must be a matrix" +
    TypeError: matrix must be a matrix(list of lists) of integers/floats

With a string:
    >>> matrix_divided('matrix', 2)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 16, in matrix_divided
        raise TypeError("matrix must be a matrix" +
    TypeError: matrix must be a matrix(list of lists) of integers/floats

With a matrix of floats:
    >>> matrix = [[1.22, 2.56, 4.67], [3.55, 5.25, 6.78]]
    >>> matrix_divided(matrix, 4)
    [[0.3, 0.64, 1.17], [0.89, 1.31, 1.7]]
    >>> print(matrix)
    [[1.22, 2.56, 4.67], [3.55, 5.25, 6.78]]

With an uneven matrix:
    >>> matrix = [[1, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 26, in matrix_divided
        raise TypeError('Each row of the matrix must have the same size')
    TypeError: Each row of the matrix must have the same size

With non ints or non floats in the matrix:
    >>> matrix = [[1, 3, 'Python'], [4, 8, 'C is fun']]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 29, in matrix_divided
        raise TypeError("matrix must be a matrix" +
    TypeError: matrix must be a matrix(list of lists) of integers/floats

With zero as divisor:
    >>> matrix = [[1, 2, 4], [5, 6, 7]]
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/2-matrix_divided.py", line 35, in matrix_divided
        raise ZeroDivisionError('division by zero')
    ZeroDivisionError: division by zero

With a float as divisor:
    >>> matrix = [[1.22, 2.56, 4.67], [3.55, 5.25, 6.78]]
    >>> matrix_divided(matrix, 0.5)
    [[2.44, 5.12, 9.34], [7.1, 10.5, 13.56]]
    >>> print(matrix)
    [[1.22, 2.56, 4.67], [3.55, 5.25, 6.78]]
