This is an example file for the function, matrix_mul


    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Passing two matrices that can be multiplied:
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

Passing in matrices of floats:
    >>> matrix_mul([[1.22, 2.35], [4.32, 5.67]], [[7.32, 8.65], [10.56, 11.54]])
    [[33.7464, 37.672], [91.4976, 102.7998]]

Passing in matrices containg both floats and integers:
    >>> matrix_mul([[1, 3.23], [3, 8.99]], [[4, 3.44, 6.55], [7.23, 2, 8]])
    [[27.3529, 9.9, 32.39], [76.99770000000001, 28.3, 91.57]]

Passing in two integers:
    >>> matrix_mul(2, 4)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 8, in matrix_mul
        raise TypeError('m_a must be a list')
    TypeError: m_a must be a list


Passing in a matrix and an integer(as second argument):
    >>> matrix_mul([[1, 2], [3, 4]], 4)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 8, in matrix_mul
        raise TypeError('m_a must be a list')
    TypeError: m_b must be a list

Passing in two 1D lists:
    >>> matrix_mul([1, 2, 3], [4, 5, 6])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 19, in matrix_mul
        raise TypeError('m_a must be a list of lists')
    TypeError: m_a must be a list of lists

Passing in a matrix and a 1D list:
    >>> matrix_mul([[1, 2, 3], [7, 8, 9]], [4, 5, 6])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 19, in matrix_mul
        raise TypeError('m_a must be a list of lists')
    TypeError: m_b must be a list of lists

Passing in matrices that contain a string:
    >>> matrix_mul([[1, 2, '3'], [4, 5, 6]], [[7, '8', 9], [10, 11, 12]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 24, in matrix_mul
        raise TypeError('m_a should contain only integers or floats')
    TypeError: m_a should contain only integers or floats


Passing in a matrice that contain a string:
    >>> matrix_mul([[1, 2, 3], [4, 5, 6]], [[7, '8', 9], [10, 11, 12]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 24, in matrix_mul
        raise TypeError('m_a should contain only integers or floats')
    TypeError: m_b should contain only integers or floats

Passing in matrices that cannot be multiplied (# of cols in a != # of rows in b):
    >>> matrix_mul([[1.22, 2.35, 3.50], [4.32, 5.67, 6.78]], [[7.32, 8.65, 9.21], [10.56, 11.54, 12.22]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 42, in matrix_mul
        raise ValueError("m_a and m_b can't be multiplied")
    ValueError: m_a and m_b can't be multiplied

Passing in matrices of uneven row length:
    >>> matrix_mul([[1.22, 2.35], [4.32, 5.67, 4.55]], [[7.32, 8.65], [10.56, 11.54, 3.44]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 27, in matrix_mul
        raise TypeError('each row of m_a must be of the same size')
    TypeError: each row of m_a must be of the same size

Passing in one matrice of uneven row length:
    >>> matrix_mul([[1.22, 2.35], [4.32, 4.55]], [[7.32, 8.65], [10.56, 11.54, 3.44]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 27, in matrix_mul
        raise TypeError('each row of m_a must be of the same size')
    TypeError: each row of m_b must be of the same size

Passing in empty matrices:
    >>> matrix_mul([[]], [[]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 25, in matrix_mul
        raise ValueError("m_a can't be empty")
    ValueError: m_a can't be empty

Passing in an empty matrice as second argument:
    >>> matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/100-matrix_mul.py", line 37, in matrix_mul
        raise ValueError("m_b can't be empty")
    ValueError: m_b can't be empty
