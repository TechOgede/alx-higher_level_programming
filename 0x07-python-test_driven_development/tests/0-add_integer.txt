This is an example file for the function, add_integer()

add_integer returns the sum of its arguments.
It takes ints or floats as arguments and then casts the
floats as ints before carrying out the addition.

    >>> add_integer = __import__('0-add_integer').add_integer

Example with two ints
    >>> add_integer(1, 2)
    3

Example with an int and a float
    >>> add_integer(1, 2.5)
    3

Example with two floats
    >>> add_integer(1.5, 2.5)
    3

Example with a string and an int
    >>> add_integer('Python', 2)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
            raise TypeError("a must be an integer")
    TypeError: a must be an integer

Example with a negative integer
    >>> add_integer(-1, 2)
    1

With another negative integer
    >>> add_integer(1, -2)
    -1

When a list is passed
    >>> l = [1, 2, 3]

    >>> add_integer(2, l)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 16, in add_integer
            raise TypeError("b must be an integer")
    TypeError: b must be an integer

Passing 2 alone:
    >>> add_integer(2)
    100

Passing -8 alone:
    >>> add_integer(-8)
    90

Example with two strings:
    >>> add_integer('4', '6')
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        File "/root/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
        raise TypeError("a must be an integer")
    TypeError: a must be an integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
